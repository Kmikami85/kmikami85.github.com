<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WEB server on BeagleBoard-xM | My Tech Blog]]></title>
  <link href="http://Kmikami85.github.com/blog/categories/web-server-on-beagleboard-xm/atom.xml" rel="self"/>
  <link href="http://Kmikami85.github.com/"/>
  <updated>2014-02-03T17:39:38+09:00</updated>
  <id>http://Kmikami85.github.com/</id>
  <author>
    <name><![CDATA[Mikami Kazuya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LAMP Installation]]></title>
    <link href="http://Kmikami85.github.com/blog/2014/02/03/lamp-installation/"/>
    <updated>2014-02-03T16:44:27+09:00</updated>
    <id>http://Kmikami85.github.com/blog/2014/02/03/lamp-installation</id>
    <content type="html"><![CDATA[<p>This article provides the way how to install LAMP with meaning in below on ArchLinux setup for bringing web development environment.</p>

<p>L &mdash; Linux <br/>
A &mdash; Apache <br/>
M &mdash; MariaDB<br/>
P &mdash; PHP</p>

<h2>1. Install all required packages.</h2>

<p>```</p>

<blockquote><p>pacman -S apache
pacman -S php
pacman -S php-apache
pacman -S mariadb
```</p></blockquote>

<h2>2. Apache configuration.</h2>

<p>Backup original httpd.conf file.</p>

<p>```</p>

<blockquote><p>cp httpd.conf httpd.conf.org
```</p></blockquote>

<p>Edit /etc/httpd/conf/httpd.conf file to support PHP on Apache.</p>

<p>```
LoadModule php5_module modules/libphp5.so</p>

<p>:</p>

<h1>PHP support on Apache</h1>

<p>Include conf/extra/php5_module.conf
```</p>

<p>Edit /etc/httpd/conf/mime.types to support expension php and php5.</p>

<p><code>
application/x-httpd-php                         php php5
</code></p>

<p>Edit /etc/httpd/conf/httpd.conf file to include user directory config file.</p>

<p>```</p>

<h1>User directory settings</h1>

<p>Include conf/extra/httpd-userdir.conf
```</p>

<p>Create web sharing folder under user directory.</p>

<p>```</p>

<blockquote><p>mkdir /home/kazuya/public_html
chmod o+x /home/kazuya/public_html/
```</p></blockquote>

<p>Configure user directory setting on /etc/httpd/conf/extra/httpd-userdir.conf for example..</p>

<p>```</p>

<h1>Settings for user home directories</h1>

<p>#</p>

<h1>Required module: mod_userdir</h1>

<p>#</p>

<h1>UserDir: The name of the directory that is appended onto a user&rsquo;s home</h1>

<h1>directory if a ~user request is received.  Note that you must also set</h1>

<h1>the default access control for these directories, as in the example below.</h1>

<p>#
UserDir public_html</p>

<p>#</p>

<h1>Control access to UserDir directories.  The following is an example</h1>

<h1>for a site where these directories are restricted to read-only.</h1>

<p>#</p>

<pre><code>AllowOverride FileInfo AuthConfig Limit Indexes
Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec

    Order allow,deny
    Allow from all


    Order deny,allow
    Deny from all
</code></pre>

<p>```</p>

<p>SSL setting.</p>

<p>```</p>

<blockquote><p>cd /etc/httpd/conf
openssl genrsa -out server.key 2048
chmod 600 server.key
openssl req -new -key server.key -out server.csr
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
```</p></blockquote>

<p>Uncomment SSL setting include on /etc/httpd/conf/httpd.conf.</p>

<p>```</p>

<h1>Secure (SSL/TLS) connections</h1>

<p>Include conf/extra/httpd-ssl.conf
```</p>

<p>Start Apache service.</p>

<p>```</p>

<blockquote><p>systemctl start httpd.service
```</p></blockquote>

<p>Enable Apache service to start it automatically at system boot.</p>

<p>```</p>

<blockquote><p>systemctl enable httpd.service
```</p></blockquote>

<h2>3. Maria DB configuration.</h2>

<p>Start mysqld.</p>

<p>```</p>

<blockquote><p>systemctl start mysqld
```</p></blockquote>

<p>Verify user list.</p>

<p>```</p>

<blockquote><p>mysql -u root</p></blockquote>

<p>MariaDB [(none)]> select host,user,password from mysql.user;
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+
| host      | user | password |
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+
| localhost | root |          |
| kazuya    | root |          |
| 127.0.0.1 | root |          |
| ::1       | root |          |
| localhost |      |          |
| kazuya    |      |          |
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+
6 rows in set (0.00 sec)
```</p>

<p>Set password for each users.</p>

<p>```
MariaDB [(none)]> set password for root@localhost = password(&lsquo;******&rsquo;);
Query OK, 0 rows affected (0.00 sec)</p>

<p>MariaDB [(none)]> set password for root@kazuya = password(&lsquo;******&rsquo;);
Query OK, 0 rows affected (0.00 sec)</p>

<p>MariaDB [(none)]> set password for <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x72;&#x6f;&#x6f;&#116;&#64;&#x31;&#50;&#55;&#x2e;&#x30;&#46;&#x30;&#x2e;&#49;">&#114;&#111;&#111;&#116;&#64;&#49;&#x32;&#55;&#46;&#x30;&#x2e;&#x30;&#46;&#49;</a> = password(&lsquo;******&rsquo;);
Query OK, 0 rows affected (0.00 sec)</p>

<p>MariaDB [(none)]> select host,user,password from mysql.user;
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| host      | user | password                                  |
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| localhost | root | <em>B80F21401C33236FF4B13E3E57255D93821112CF |
| kazuya    | root | </em>B80F21401C33236FF4B13E3E57255D93821112CF |
| 127.0.0.1 | root | *B80F21401C33236FF4B13E3E57255D93821112CF |
| ::1       | root |                                           |
| localhost |      |                                           |
| kazuya    |      |                                           |
+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
6 rows in set (0.00 sec)
```</p>

<p>Set MariaDB to start automatically when boot.</p>

<p>```</p>

<blockquote><p>systemctl enable mysqld
```</p></blockquote>

<h2>4. phpMyAdmin configuration.</h2>

<p>phpMyAdmin is a web browser-based MySQL management tool using Apache and PHP.</p>

<p>```</p>

<blockquote><p>pacman -S phpmyadmin
pacman -S php-mcrypt
```</p></blockquote>

<p>Copy example setting file.</p>

<p>```</p>

<blockquote><p>cp /etc/webapps/phpmyadmin/apache.example.conf /etc/httpd/conf/extra/httpd-phpmyadmin.conf
```</p></blockquote>

<p>Edit /etc/httpd/conf/httpd.conf file to include phpMyAdmin configuration file.</p>

<p>```</p>

<h1>phpMyAdmin configuration</h1>

<p>Include conf/extra/httpd-phpmyadmin.conf
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup wireless network with USB wifi adapter]]></title>
    <link href="http://Kmikami85.github.com/blog/2014/02/03/setup-wireless-network-with-usb-wifi-adapter/"/>
    <updated>2014-02-03T16:17:23+09:00</updated>
    <id>http://Kmikami85.github.com/blog/2014/02/03/setup-wireless-network-with-usb-wifi-adapter</id>
    <content type="html"><![CDATA[<p>This archive provides the way how to enable wireless internet connection using USB wifi adapter.
I selected USB wifi adapter &ldquo;Buffalo WLI-UC-GNM2&rdquo; and this article is given the method on this particular H/W.</p>

<h2>1. Verify USB wifi adapter device.</h2>

<p>First of all, you will need to insert USB wifi adapter into BeagleBoard-xM USB slot.
Once getting detected, you will able to see exact product name, manufacturer and so on.</p>

<p>```</p>

<blockquote><p>lsusb
Bus 001 Device 004: ID 0411:01a2 BUFFALO INC. (formerly MelCo., Inc.) WLI-UC-GNM Wireless LAN Adapter [Ralink RT8070]
```</p></blockquote>

<p>Also try dmesg with searching name of &ldquo;usbcore&rdquo;.
Please refer last line, you can see &ldquo;rt2800usb&rdquo;, this is exactly used USB driver for the wifi adapter.</p>

<p>```</p>

<blockquote><p>dmesg | grep usbcore
[    0.224853] usbcore: registered new interface driver usbfs
[    0.224945] usbcore: registered new interface driver hub
[    0.225219] usbcore: registered new device driver usb
[    0.829833] usbcore: registered new interface driver cdc_ether
[    0.829925] usbcore: registered new interface driver rndis_host
[    0.830047] usbcore: registered new interface driver cdc_ncm
[    1.882110] usbcore: registered new interface driver usb-storage
[    2.301086] usbcore: registered new interface driver snd-usb-6fire
[   18.209228] usbcore: registered new interface driver smsc95xx
[   23.241851] usbcore: registered new interface driver rt2800usb
```</p></blockquote>

<p>Next you need to verify whether using Linux Kernel supports the USB driver.
It will show installed driver list on the installed ArchLinux upon executing lsmod.
Now you can see the term &ldquo;rt2800usb&rdquo;. Which mean you won&rsquo;t need any additional driver as Linux already supports the required USB driver.</p>

<p>```</p>

<blockquote><p>lsmod
Module                  Size  Used by
arc4                    1692  2
rt2800usb              14783  0
rt2800lib              55454  1 rt2800usb
crc_ccitt               1574  1 rt2800lib
rt2x00usb              10836  1 rt2800usb
rt2x00lib              51647  3 rt2x00usb,rt2800lib,rt2800usb
mac80211              482298  3 rt2x00lib,rt2x00usb,rt2800lib
cfg80211              189670  2 mac80211,rt2x00lib
rfkill                 18278  4 cfg80211
smsc95xx               15424  0
twl4030_madc_hwmon      2631  0
gpio_keys               8145  0
autofs4                22254  2
```</p></blockquote>

<h2>2. Bring interface with &ldquo;ip link set wlan0 up&rdquo;.</h2>

<p>```</p>

<blockquote><p>ip link set wlan0 up
```</p></blockquote>

<p>Check output of &ldquo;ip link&rdquo;.
The UP in &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; is what indicates the interface is up, not the later state DOWN.</p>

<p>```</p>

<blockquote><p>ip link
1: lo: &lt;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default</p>

<pre><code>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</code></pre>

<p>2: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 1000</p>

<pre><code>link/ether 0e:ba:23:f0:6e:e9 brd ff:ff:ff:ff:ff:ff
</code></pre>

<p>3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</p>

<pre><code>link/ether 10:6f:3f:ec:e7:f8 brd ff:ff:ff:ff:ff:ff
</code></pre>

<p>```</p></blockquote>

<h2>3. Install required packages for wireless network setting.</h2>

<p>Install wireless_tools to use iwconfig.</p>

<p>```</p>

<blockquote><p>pacman -S wireless_tools
```</p></blockquote>

<p>Install iw to use iw for access point discovery.</p>

<p>```</p>

<blockquote><p>pacman -S iw
```</p></blockquote>

<p>Install wpa_supplicant for WPA/WPA2 encryption setting.</p>

<p>```</p>

<blockquote><p>pacman -S wpa_supplicant
```</p></blockquote>

<h2>4. Discovery available access point.</h2>

<p>Execute iw command to discover candidates of access point in your environment.
To check result later, it is redirected to a text file.</p>

<p>```</p>

<blockquote><p>iw dev wlan0 scan | less > ap_list.txt
```</p></blockquote>

<p>Here a result of discovering output to ap_list.txt.
You can find access point what you are currently using named in SSID.</p>

<p><code>
SSID: WARPSTAR-F46952
capability: ESS Privacy ShortPreamble ShortSlotTime (0x0431)
signal: -43.00 dBm
WPA:     * Version: 1
* Group cipher: CCMP
* Pairwise ciphers: CCMP
* Authentication suites: PSK
</code></p>

<p>If you like to use ad-hoc(IBSS) mode, you can execute below command.</p>

<p>```</p>

<blockquote><p>iw dev wlan0 set type ibss
```</p></blockquote>

<h2>5. Associate wifi access point.</h2>

<p>Enter your SSID and Password of your access point and redirect to configuration file.</p>

<p>```</p>

<blockquote><p>wpa_passphrase myid mypass > /etc/wpa_supplicant/wpa_supplicant_kazuya.conf
```</p></blockquote>

<p>You will able to see below structure for example.</p>

<p>```
network={</p>

<pre><code>    ssid="WARPSTAR-F46952"
    #psk="Entered Password"
    psk=Encrypted password
</code></pre>

<p>}
```</p>

<p>Associate wifi access point.</p>

<p>```</p>

<blockquote><p>wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant_kazuya.conf
```</p></blockquote>

<p>Verify it&rsquo;s association is success.</p>

<p>```</p>

<blockquote><p>iw dev wlan0 link
Connected to 00:1b:8b:e8:6b:4e (on wlan0)</p>

<pre><code>    SSID: WARPSTAR-F46952
    freq: 2427
    RX: 264636 bytes (1499 packets)
    TX: 2098 bytes (34 packets)
    signal: -43 dBm
    tx bitrate: 6.5 MBit/s MCS 0
</code></pre></blockquote>

<pre><code>    bss flags:      short-preamble short-slot-time
    dtim period:    1
    beacon int:     100
</code></pre>

<p>```</p>

<h2>6. Bring dhcp address.</h2>

<p>Now let&rsquo;s try to bring IP connection using DHCP.</p>

<p>```</p>

<blockquote><p>dhcpcd wlan0
dhcpcd[183]: version 6.1.0 starting
dhcpcd[183]: wlan0: soliciting an IPv6 uter
dhcpcd[183]: wlan0: soliciting a DHCP lease
dhcpcd[183]: wlan0: Router Advertisement from fe80::212:e2ff:fe70:97f8
dhcpcd[183]: dhcp6_start: wlan0: Protocol not available
dhcpcd[183]: wlan0: offered 192.168.0.9 from 192.168.0.1</p></blockquote>

<p>dhcpcd[183]: wlan0: leased 192.168.0.9 for 86400 seconds
dhcpcd[183]: wlan0: adding host route to 192.168.0.9 via 127.0.0.1
dhcpcd[183]: wlan0: adding route to 192.168.0.0/24
dhcpcd[183]: wlan0: adding default route via 192.168.0.1
dhcpcd[183]: forked to background, child pid 311
```</p>

<p>You should use internet connection from now on.</p>

<h2>7. Automated wireless connection at boot.</h2>

<p>Create vim /etc/systemd/system/network-wireless\@.service with any editor.
Edit setting as below.</p>

<p>```
[Unit]
Description=Wireless network connectivity (%i)
Wants=network.target
Before=network.target
BindsTo=sys-subsystem-net-devices-%i.device
After=sys-subsystem-net-devices-%i.device</p>

<p>[Service]
Type=oneshot
RemainAfterExit=yes</p>

<p>ExecStart=/usr/bin/ip link set dev %i up
ExecStart=/usr/bin/wpa_supplicant -B -i %i -c /etc/wpa_supplicant/wpa_supplicant_kazuya.conf
ExecStart=/usr/bin/dhcpcd %i</p>

<p>ExecStop=/usr/bin/ip link set dev %i down</p>

<p>[Install]
WantedBy=multi-user.target
```</p>

<p>Start service.</p>

<p>```</p>

<blockquote><p>systemctl start network-wireless\@wlan0.service
```</p></blockquote>

<p>If wireless network works fine, enable the service to start internet connection at boot.</p>

<p>```</p>

<blockquote><p>systemctl enable network-wireless\@wlan0.service
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux Installation]]></title>
    <link href="http://Kmikami85.github.com/blog/2014/02/03/arch-linux-installation/"/>
    <updated>2014-02-03T16:04:49+09:00</updated>
    <id>http://Kmikami85.github.com/blog/2014/02/03/arch-linux-installation</id>
    <content type="html"><![CDATA[<p>If you are able to see below prompt after power-ON beagleboard-xM with inserting SD card,
It means you have installed Arch Linux successfully. Let&rsquo;s start basic setting of Linux.</p>

<h2>1. Enter Arch Linux.(login:root password:root)</h2>

<p>```
Arch Linux 3.7.10-9-ARCH (ttyO2)</p>

<p>alarm login: root
Password:
```</p>

<h2>2. Change host name.(hostname:kazuya-server)</h2>

<p>```</p>

<blockquote><p>hostnamectl set-hostname kazuya-server
```</p></blockquote>

<p>The command will be reflected on /etc/hostname.</p>

<p>```</p>

<blockquote><p>cat /etc/hostname
kazuya-server
```</p></blockquote>

<h2>3. Add User.(user id:kazuya)</h2>

<p>```</p>

<blockquote><p>useradd -m -s /bin/bash kazuya
passwd kazuya
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
```</p></blockquote>

<h2>4. Enable added user to use root command with using sudo command.</h2>

<p>Open visudo editor for this particular purpose.</p>

<p>```</p>

<blockquote><p>VISUAL=&ldquo;/usr/bin/vim -p -X&rdquo; visudo
```</p></blockquote>

<p>Add new below line to give sudo permission.</p>

<p>```</p>

<h1>#</h1>

<h2>User privilege specification</h2>

<h1>#</h1>

<p>root ALL=(ALL) ALL
kazuya ALL=(ALL) ALL    // Give sudo permission to user &ldquo;kazuya&rdquo;.
```</p>

<h2>5. Change locale as Japanese setting.</h2>

<p>Open the text /etc/locale.gen using any editor.
Uncomment below lines.</p>

<p>```</p>

<h1>en_SG ISO-8859-1</h1>

<p>en_US.UTF-8 UTF-8    // UTF-8 support for English.</p>

<h1>en_US ISO-8859-1</h1>

<h1>ja_JP.EUC-JP EUC-JP</h1>

<p>ja_JP.UTF-8 UTF-8    // UTF-8 support for Japanese.</p>

<h1>ka_GE.UTF-8 UTF-8</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SD Card Creation]]></title>
    <link href="http://Kmikami85.github.com/blog/2014/02/03/sd-card-creation/"/>
    <updated>2014-02-03T14:59:15+09:00</updated>
    <id>http://Kmikami85.github.com/blog/2014/02/03/sd-card-creation</id>
    <content type="html"><![CDATA[<p>This archive provides how to create micro SD card for BeagleBoard-xM with bundled Arch Linux.
Arch Linux requires advance knowledge of Linux otherwise it won&rsquo;t work anything.
Please note, below steps are expected to be performed on Linux machine.
In my case I used Ubuntu for the creation.</p>

<h2>1. Create SD card partition.(Assuming micro SD card is detected as /dev/sdb)</h2>

<p>I used 16GB SD card, created 128MB space for boot partition and remaining size space for rootfs partition.</p>

<p>```</p>

<blockquote><p>fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel
Building a new DOS disklabel with disk identifier 0xf8d3c4ab.
Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won&rsquo;t be recoverable.</p></blockquote>

<p>Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</p>

<p>Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-30703615, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-30703615, default 30703615): +128M</p>

<p>Command (m for help): t
Selected partition 1
Hex code (type L to list codes): e
Changed system type of partition 1 to e (W95 FAT16 (LBA))</p>

<p>Command (m for help): a
Partition number (1-4): 1</p>

<p>Command (m for help): m
Command action
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition&rsquo;s system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)</p>

<p>Command (m for help): n
Partition type:
   p   primary (1 primary, 0 extended, 3 free)
   e   extended
Select (default p): p
Partition number (1-4, default 2): 2
First sector (264192-30703615, default 264192):
Using default value 264192
Last sector, +sectors or +size{K,M,G} (264192-30703615, default 30703615):
Using default value 30703615</p>

<p>Command (m for help): w
The partition table has been altered!</p>

<p>Calling ioctl() to re-read partition table.</p>

<p>WARNING: If you have created or modified any DOS 6.x
partitions, please see the fdisk manual page for additional
information.
Syncing disks.
```</p>

<h2>2. Format created the partitions.</h2>

<p>Be sure to copy MLO first.</p>

<p>```</p>

<blockquote><p>wget <a href="http://archlinuxarm.org/os/omap/BeagleBoard-bootloader.tar.gz">http://archlinuxarm.org/os/omap/BeagleBoard-bootloader.tar.gz</a>
tar xvzf BeagleBoard-bootloader.tar.gz
./mkcard.sh
./MLO
./u-boot.bin
./uEnv.txt
cp MLO /media/boot/
cp MLO u* /media/boot/
sync
```</p></blockquote>

<h2>3. Download ArchLinux file system and copy to boot partition.</h2>

<p>```</p>

<blockquote><p>wget <a href="http://archlinuxarm.org/os/ArchLinuxARM-omap-smp-latest.tar.gz">http://archlinuxarm.org/os/ArchLinuxARM-omap-smp-latest.tar.gz</a>
tar xvpzf ArchLinuxARM-omap-smp-latest.tar.gz -C /media/rootfs/
```</p></blockquote>

<h2>4. Copy kernel image which is existing under the rootfs/boot/ to boot partition.</h2>

<p>```</p>

<blockquote><p>cp /media/rootfs/boot/uImage .
sync
ls
ArchLinuxARM-omap-smp-latest.tar.gz BeagleBoard-bootloader.tar.gz uImage
cp uImage /media/boot/
sync
```</p></blockquote>

<h2>5. Create boot.scr through boot.cmd.</h2>

<p>Here contents of boot.cmd for example.</p>

<p><code>
setenv bootargs 'console=ttyO2,115200n8 root=/dev/mmcblk0p2 rw rootfstype=ext3 rootwait'
mmc rescan
fatload mmc 0 0x80300000 uImage
bootm 0x80300000
boot
</code></p>

<p>Execute below command to make boot.scr.</p>

<p>```</p>

<blockquote><p>mkimage -A arm -O linux -T script -C none -a 0 -e 0 -n &ldquo;Beagleboard-xM boot script&rdquo; -d boot.cmd boot.scr
```</p></blockquote>

<h2>6. Copy boot.cmd and boot.scr to boot partition.</h2>

<p>```</p>

<blockquote><p>cp boot.cmd boot.scr /media/boot/
sync
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
